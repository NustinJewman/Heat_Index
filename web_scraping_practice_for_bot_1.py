# -*- coding: utf-8 -*-
"""web scraping practice for bot 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MzAKfrsyB0ZuJxUwfREqE8sNps4gu2ie
"""

import pandas as pd
import re 
import json

def edit_column_in_df(df, column_name):

    def edit_first_word(cell):
        # Split the cell contents by whitespace
        words = cell.split(maxsplit=1)
        if len(words) > 1:
            # Take the first word and delete everything before the last capital letter
            first_word = words[0]
            second_word = words[1]
            last_capital_index = -1
            for i, char in enumerate(first_word):
                if char.isupper():
                    last_capital_index = i
                if second_word == 'Clippers': #edge case for the LA Clippers that was throwing the function off
                  last_capital_index = last_capital_index - 1
            if last_capital_index != -1:
                first_word = first_word[last_capital_index:]
            # Join the first word with the rest of the cell contents
            return ' '.join([first_word] + words[1:])
        else:
            return cell

    # Apply the function to the specified column
    df[column_name] = df[column_name].apply(edit_first_word)

url = 'https://www.espn.com/nba/standings'

tables = pd.read_html(url, header=None)

nametableeast = tables[0]
nametableeast = pd.DataFrame([nametableeast.columns.tolist()] + nametableeast.values.tolist(), columns=range(len(nametableeast.columns)))
nametableeast = nametableeast.rename(columns={0: 'Team'})
edit_column_in_df(nametableeast, 'Team') #FINALLY!!!!! this function takes the first column and removes the number and and the 3 letter abbreviation
# print(nametableeast)

nametablewest = tables[2] # original data pulled from NBA website
nametablewest = pd.DataFrame([nametablewest.columns.tolist()] + nametablewest.values.tolist(), columns=range(len(nametablewest.columns)))
nametablewest = nametablewest.rename(columns={0: 'Team'})
edit_column_in_df(nametablewest, 'Team') #this function takes the first column and removes the number and and the 3 letter abbreviation
# print(nametablewest)

stattableeast = tables[1]
# print(stattableeast)

stattablewest = tables[3]
# print(stattablewest)

fulltableeast = pd.concat([nametableeast, stattableeast], axis="columns")
# print(fulltableeast)

fulltablewest = pd.concat([nametablewest, stattablewest], axis="columns")
# print(fulltablewest)

fulltable = pd.concat([fulltableeast, fulltablewest], axis="rows")
fulltable.reset_index(drop=True, inplace=True)
print(fulltable)

fulltable_streaks = fulltable.sort_values(by=['STRK'])
# print(fulltable_streaks)

def in_winners(string):
    return bool(re.match(r'W\d+', string))

def in_losers(string):
    return bool(re.match(r'L\d+', string))

# win_streak_filter = fulltable_streaks['STRK'] == re.match(r'W\d+', fulltable_streaks['STRK'])
recent_winners = fulltable_streaks[fulltable_streaks['STRK'].apply(in_winners)]
recent_losers = fulltable_streaks[fulltable_streaks['STRK'].apply(in_losers)]
# winners = 'STRK' == "W%"
recent_winners.reset_index(drop=True, inplace=True)
recent_losers.reset_index(drop=True, inplace=True)
# print(recent_losers)

def significant_winning_streaks(string):
  return bool(re.match(r'W[3-9]\d*', string))

def significant_losing_streaks(string):
  return bool(re.match(r'L[3-9]\d*', string))

win_streaks = recent_winners[recent_winners['STRK'].apply(significant_winning_streaks)]
losing_streaks = recent_losers[recent_losers['STRK'].apply(significant_losing_streaks)]
losing_streaks.reset_index(drop=True, inplace=True)
win_streaks.reset_index(drop=True, inplace=True)
print(win_streaks)

print(losing_streaks)

win_json = json.loads(win_streaks.to_json(orient="index", indent=0)) # json.loads very important to avoid escape character backslahses
lose_json = json.loads(losing_streaks.to_json(orient="index", indent=0))

# print(win_json, lose_json)

# clear the json file before writing the data to the file - removes old data
open('./json-data/win-streaks.json', 'w').close()
with open("./json-data/win-streaks.json", "w") as file:
    json.dump(win_json, file)

open('./json-data/losing-streaks.json', 'w').close()
with open("./json-data/losing-streaks.json", "w") as file:
    json.dump(lose_json, file)

open('./json-data/all-streaks.json', 'w').close()
with open('./json-data/all-streaks.json', 'w') as file:
    json.dump({}, file)
    
